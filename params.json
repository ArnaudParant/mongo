{"name":"Mongo.ml","tagline":"An OCaml driver for Mongodb","body":"**Mongo.ml** is an OCaml driver for MongoDB. \r\n\r\nIt supplies a series of APIs which can be used to communicate with MongoDB, i.e., **Insert**, **Update**, **Delete** and **Query / Find**.\r\n\r\nHere is the [Mongo.ml API docs]().\r\n\r\n### Prequisite\r\n\r\nThis driver uses **unix** and external [Bson.ml](http://massd.github.io/bson/) modules.\r\n\r\nFor the conveniences, **bson.ml** and **bson.mli** are included in the **src** folder with **Mongo.ml**\r\n\r\nHere is the [Bson.ml API doc](http://massd.github.io/bson/doc/Bson.html).\r\n\r\n***\r\n\r\n### How to use it\r\n\r\n**Mongo** and **MongoAdmin** are the two modules for high level usage.\r\n\r\n**Mongo** is a MongoDB client for general purpose. It can be used to operate normal bson documents on MongoDB.\r\n\r\n**MongoAdmin** is a special MongoDB client for accessing admin level of MongoDB commands, such as _list databases_, etc. Please refer to [MongoDB commands](http://docs.mongodb.org/manual/reference/command/).\r\n\r\nThe usages of these two modules are similar:\r\n\r\n1. **Mongo.create** a Mongo with ip, port, db\\_name, and collection\\_name (MongoAdmin does not need db\\_name or collection\\_name)\r\n2. Depending on the request type, create the Bson document using **Bson.ml**\r\n3. **Mongo.insert** / **Mongo.update** / **Mongo.delete** / **Mongo.find** / **Mongo.get_more** / **Mongo.kill_cursors**\r\n4. Only **Mongo.find** and **Mongo.get_more** will wait for a **MongoReply**. Others will finish immediately.\r\n5. **Mongo.destory** the Mongo to release the resources.\r\n\r\n***\r\n\r\n### Sample usage\r\n\r\nPlease refer to **test/test_mongo.ml** for a taste of usage.\r\n\r\n\tocamlbuild -use-ocamlfind -I src test/test_mongo.native\r\n\t./test_mongo.native\r\n\r\n***\r\n\r\n### Extend the driver\r\n\r\nComparing to MongoDB's official drivers, **this OCaml driver is not that complete.**\r\n\r\nThis driver can be used only for **essential** operations on MongoDB, particularly with all default options/configurations.\r\n\r\nI am slowly extend this driver and **experienced OCaml/MongoDB developers are welcomed to join**.\r\n\r\n***\r\n\r\n### The source code\r\n\r\n**MongoOperation** defines all operations allowed by MongoDB.\r\n\r\n**MongoHeader** defines the header that is used in MongoDB messages. It includes encoding / decoding the MongoDB messages. When constructing a **MongoRequest**, encoding is used; when constructing a **MongoReply** from the message sent by MongoDB, decoding is used.\r\n\r\n**MongoRequest** create the message bytes (string) for all requests. The output string can be used to **MongoSend** to send to MongoDB socket. Every function inside has full parameters according to [MongoDB wire protocol](http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-wire-protocol/).\r\n\r\n**MongoSend** takes a **unix file_descr** and a **string** and send the string to the file_descr. It uses **unix**.\r\n\r\n**MongoReply** is the type that contains the reply MongoDB.\r\n\r\n**Mongo** and **MongoAdmin** are the client-faced interfaces. They are the first places to be extended.\r\n\r\n***\r\n\r\n### Misco\r\n\r\nThe current version is **0.66.0**.","google":"UA-40567510-4","note":"Don't delete this file! It's used internally to help with page regeneration."}